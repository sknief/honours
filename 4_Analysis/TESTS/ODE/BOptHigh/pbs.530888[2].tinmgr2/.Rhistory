} else if (OPTIMA == "Neutral") {
BOpt = 0
} else {
print("Invalid Input for the Optima. Would you like to try again?")
}
} else {
print("I do not recognize that model type, did you spell something wrong?")
}
#next, get your file locations right & tight
WD <- paste0(JOBID,"[", NODE, "]")
workdirectory <- paste0("C:/Users/sknie/github/honours/4_Analysis/", MODELTYPE, "/", OPTIMA, "/pbs.", WD , ".tinmgr2")
setwd(workdirectory)
#second nested loop: get your seed / combo locations right depending on model type
if (MODELTYPE == "ADD") {
seeds <- read.csv("C:/Users/sknie/github/honours/3_HPC/OutbackRuns/ADD/seeds.csv")
combos <-read.csv("C:/Users/sknie/github/honours/3_HPC/OutbackRuns/ADD/combo.csv")
} else if (MODELTYPE == "ODE") {
seeds <- read.csv("C:/Users/sknie/github/honours/3_HPC/OutbackRuns/ODE/seeds.csv")
combos <-read.csv("C:/Users/sknie/github/honours/3_HPC/OutbackRuns/ODE/combo.csv")
} else {
print("Could not locate files - check your model type input!")
}
#read in all files based on specifications above for all generations
#myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.csv")), read.table) #ODE
myFiles <- lapply(Sys.glob(paste0("SLiM-output_ADD_", j, "_", i, ".csv")), read.csv) #ADD
#Bigpopa, my hyuge shrimp, says hi (alot of the modifyers comes from ODE files, need separate loops again! )
BIGPOPA <- bind_rows(myFiles, .id = "Generation")
colnames(BIGPOPA) <- BIGPOPA[1,] #column names
colnames(BIGPOPA)[1] <- "Generation" #fix one label
BIGPOPA <- subset(BIGPOPA, AAlpha!= "AAlpha") #remove the labels
BIGPOPA <-   mutate_all(BIGPOPA, .funs = as.numeric) #turns characters into numerics
#tetris, my beloved snail, says hi
TETRIS <- BIGPOPA %>%
group_by(BIGPOPA$Generation) %>%
summarise(AAlpha = mean(AAlpha),
ABeta = mean(ABeta),
BAlpha = mean(BAlpha),
BBeta = mean(BBeta),
AConc = mean(AConc),
BConc = mean(BConc)
)
colnames(TETRIS)[1] <- "Generation"
TETRIS$SEED <- j
#read in all files based on specifications above for all generations
#myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.csv")), read.table) #ODE
myFiles <- lapply(Sys.glob(paste0("SLiM-output_ADD_", j, "_", i, ".csv")), read.csv) #ADD
#read in all files based on specifications above for all generations
myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.csv")), read.table) #ODE
#read in all files based on specifications above for all generations
myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.csv")), read.table) #ODE
#FILES
foreach(i=1:3) %:%
foreach(j= transseeds$Transseed) %do% {
#read in all files based on specifications above for all generations
myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.csv")), read.table) #ODE
#myFiles <- lapply(Sys.glob(paste0("SLiM-output_ADD_", j, "_", i, ".csv")), read.csv) #ADD
#Bigpopa, my hyuge shrimp, says hi (alot of the modifyers comes from ODE files, need separate loops again! )
BIGPOPA <- bind_rows(myFiles, .id = "Generation")
colnames(BIGPOPA) <- BIGPOPA[1,] #column names
colnames(BIGPOPA)[1] <- "Generation" #fix one label
BIGPOPA <- subset(BIGPOPA, AAlpha!= "AAlpha") #remove the labels
BIGPOPA <-   mutate_all(BIGPOPA, .funs = as.numeric) #turns characters into numerics
#tetris, my beloved snail, says hi
TETRIS <- BIGPOPA %>%
group_by(BIGPOPA$Generation) %>%
summarise(AAlpha = mean(AAlpha),
ABeta = mean(ABeta),
BAlpha = mean(BAlpha),
BBeta = mean(BBeta),
AConc = mean(AConc),
BConc = mean(BConc)
)
colnames(TETRIS)[1] <- "Generation"
TETRIS$SEED <- j
TETRIS$Index <- i
#for the datasets
#fitness
BIGPOPA$fitness = exp(-((BIGPOPA$BConc-BOpt)/S)^2);
TETRIS$fitness <- BIGPOPA %>%
group_by(BIGPOPA$Generation, .add = FALSE) %>%
summarise(fitness= mean(fitness)) %>%
pull(fitness)
#distance
BIGPOPA$distance <- BIGPOPA$BConc-BOpt
TETRIS$distance <- BIGPOPA %>%
group_by(BIGPOPA$Generation, .add = FALSE) %>%
summarise(distance = mean(distance)) %>%
pull(distance)
#Tetris
teddy <- as.character(paste0("Tetris_onerun_", j, "_", i,  "_node_", NODE,  ".csv"))
Tetris <- as.data.frame(TETRIS)
write.table(Tetris, teddy,
append = FALSE,
row.names = FALSE,
col.names = TRUE)
#BigPopa
BigPop <- as.character(paste0("BigPopa_onerun_", j, "_", i, "_node_", NODE,  ".csv"))
write.table(BIGPOPA, BigPop,
append = FALSE,
row.names = FALSE,
col.names = TRUE)
#mutation data stuff would go here
}
#next, get your file locations right & tight
WD <- paste0(JOBID,"[", NODE, "]")
workdirectory <- paste0("C:/Users/sknie/github/honours/4_Analysis/", MODELTYPE, "/", OPTIMA, "/pbs.", WD , ".tinmgr2")
setwd(workdirectory)
#read in all files based on specifications above for all generations
myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.csv")), read.table) #ODE
#read in all files based on specifications above for all generations
myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.txt")), read.table) #ODE
#FILES
foreach(i=1:3) %:%
foreach(j= transseeds$Transseed) %do% {
#read in all files based on specifications above for all generations
myFiles <- lapply(Sys.glob(paste0("Val_", j, "_generation_", i, "*.txt")), read.table) #ODE
#myFiles <- lapply(Sys.glob(paste0("SLiM-output_ADD_", j, "_", i, ".csv")), read.csv) #ADD
#Bigpopa, my hyuge shrimp, says hi (alot of the modifyers comes from ODE files, need separate loops again! )
BIGPOPA <- bind_rows(myFiles, .id = "Generation")
colnames(BIGPOPA) <- BIGPOPA[1,] #column names
colnames(BIGPOPA)[1] <- "Generation" #fix one label
BIGPOPA <- subset(BIGPOPA, AAlpha!= "AAlpha") #remove the labels
BIGPOPA <-   mutate_all(BIGPOPA, .funs = as.numeric) #turns characters into numerics
#tetris, my beloved snail, says hi
TETRIS <- BIGPOPA %>%
group_by(BIGPOPA$Generation) %>%
summarise(AAlpha = mean(AAlpha),
ABeta = mean(ABeta),
BAlpha = mean(BAlpha),
BBeta = mean(BBeta),
AConc = mean(AConc),
BConc = mean(BConc)
)
colnames(TETRIS)[1] <- "Generation"
TETRIS$SEED <- j
TETRIS$Index <- i
#for the datasets
#fitness
BIGPOPA$fitness = exp(-((BIGPOPA$BConc-BOpt)/S)^2);
TETRIS$fitness <- BIGPOPA %>%
group_by(BIGPOPA$Generation, .add = FALSE) %>%
summarise(fitness= mean(fitness)) %>%
pull(fitness)
#distance
BIGPOPA$distance <- BIGPOPA$BConc-BOpt
TETRIS$distance <- BIGPOPA %>%
group_by(BIGPOPA$Generation, .add = FALSE) %>%
summarise(distance = mean(distance)) %>%
pull(distance)
#Tetris
teddy <- as.character(paste0("Tetris_onerun_", j, "_", i,  "_node_", NODE,  ".csv"))
Tetris <- as.data.frame(TETRIS)
write.table(Tetris, teddy,
append = FALSE,
row.names = FALSE,
col.names = TRUE)
#BigPopa
BigPop <- as.character(paste0("BigPopa_onerun_", j, "_", i, "_node_", NODE,  ".csv"))
write.table(BIGPOPA, BigPop,
append = FALSE,
row.names = FALSE,
col.names = TRUE)
#mutation data stuff would go here
}
#density plot
distancebase <- ggplot(BIGPOPA, aes(x = distance, colour = factor(BIGPOPA$Generation)))
distancebase +
geom_density() +
theme_classic() +
labs(x = "Distance to the optima", y = "Individuals") +
theme(legend.position = "bottom")
BIGPOPA$distance <- BIGPOPA$BConc-BOpt
distancebase2 <- ggplot(TETRIS, aes(x = Generation, y = distance))
distancebase2 +
geom_point() +
theme_classic() +
labs(x = "Generations", y = "Distance to the optima") +
theme(legend.position = "none")
# Graph 2: same walks but facetted with their replicate walks (shelldons) behind them
# lets make this facetted
#ode
ODEHigh <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptHigh, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptHigh, aes( x = Generation, y = BConc), color = "red") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODEMed <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptMed, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptMed, aes( x = Generation, y = BConc), color = "yellow2") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODELow <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptLow, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptLow, aes( x = Generation, y = BConc), color = "yellowgreen") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODENeutral <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_Neutral, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_Neutral, aes( x = Generation, y = BConc), color = "red") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
#add
ADDHigh <- adaptivewalkbase +
geom_line(data = Shelldon_ADD_BOptHigh, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ADD_BOptHigh, aes( x = Generation, y = BConc), color = "limegreen") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
# Graph 2: same walks but facetted with their replicate walks (shelldons) behind them
# lets make this facetted
#ode
ODEHigh <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptHigh, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptHigh, aes( x = Generation, y = BConc), color = "red") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODEMed <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptMed, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptMed, aes( x = Generation, y = BConc), color = "yellow2") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
## GRAPH 1: Mean Alpha(A) versus time (line plots and violin plots)
#only points
graph1base <- ggplot(data = SHELLDON, aes(x = Generation, y = AAlpha))
graph1base +
geom_point(color = "grey", position = "jitter") +
geom_line(data = RICHARD, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(A)" )
#violin plots
violin1 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = AAlpha))
violin1 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(A)")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph1base +
# geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(A)")
## GRAPH 2: Mean Beta(A) versus time (line plots and violin plots)
#only points
graph2base <- ggplot(data = SHELLDON, aes(x = Generation, y = ABeta))
graph2base +
geom_point(color = "grey") +
geom_line(data = RICHARD, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean Beta(A)" )
#violin plots
violin2 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = ABeta))
violin2 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean Beta(A)")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph2base +
geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean Beta(A)")
## GRAPH 3: Mean Alpha(B) versus time (line plots and violin plots)
#only points
graph3base <- ggplot(data = SHELLDON, aes(x = Generation, y = BAlpha))
graph3base +
geom_point(color = "grey") +
geom_point(data = RICHARD,  color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(B)" )
#violin plots
violin3 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = BAlpha))
violin3 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(B)")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph3base +
geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(B)")
## GRAPH 4: Mean Beta(B) versus time (line plots and violin plots)
#only points
graph4base <- ggplot(data = SHELLDON, aes(x = Generation, y = BBeta))
graph4base +
geom_point(color = "grey") +
geom_line(data = RICHARD, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean Beta(B)" )
#violin plots
violin4 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = BBeta))
violin4 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean Beta(B)")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph4base +
geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean Beta(B)")
## GRAPH 5: Mean Integral of A versus time (line plots and violin plots)
#only points
graph5base <- ggplot(data = SHELLDON, aes(x = Generation, y = AConc))
graph5base +
geom_point(color = "grey") +
geom_line(data = RICHARD, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean AConc" )
#violin plots
violin5 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = AConc))
violin5 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean AConc")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph5base +
geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean AConc")
## GRAPH 6: Mean Integral of B versus time (line plots and violin plots)
#only points
graph6base <- ggplot(data = SHELLDON, aes(x = Generation, y = BConc))
graph6base +
geom_point(color = "grey") +
geom_line(data = RICHARD, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean BConc" )
#violin plots
violin6 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = BConc))
violin6 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean BConc")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph6base +
geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean BConc")
## GRAPH 7: Mean Population Fitness versus time (line plots and violin plots)
graph7base <- ggplot(data = SHELLDON, aes(x = Generation, y = fitness))
graph7base +
geom_point(color = "grey") +
geom_point(data = RICHARD, x = RICHARD$Generation,  y = RICHARD$fitness, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean Fitness" )
#violin plots
violin7 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = fitness))
violin7 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean Fitness")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph7base +
geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean Fitness")
## GRAPH 8*: distance from the optima
graph8base <- ggplot(data = SHELLDON, aes(x = Generation, y = distance))
graph8base +
geom_point(color = "grey") +
geom_line(data = RICHARD, color = "red") +
theme_classic() +
labs(x = "Generation", y = "Mean Distance to Optima" )
#violin plots
violin8 <- ggplot(data = SHELLDON, aes(x = factor(Generation), y = fitness))
violin8 +
geom_violin() +
theme_classic() +
labs(x = "Generation", y = "Mean Distance to Optima")
#interquartile range and lines (NOTE: i think this only makes sense with more data / on many model runs)
graph8base +
#geom_quantile(color = "salmon") + #this looks a bit ass ngl
geom_line(data = RICHARD, colour = "lightblue") + #very similar to the below
geom_smooth(colour = "lavender") + #very similar to the above
theme_classic() +
labs(x = "Generation", y = "Mean Distance to Optima")
#facet code
g1 <-
graph1base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(A)" )
g2 <-
graph2base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean Beta(A)")
g3 <-
graph3base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean Alpha(B)" )
g4 <-
graph4base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean Beta(B)")
g5 <-
graph5base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean ACONC")
g6 <-
graph6base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean BCONC")
g7 <-
graph7base +
geom_point(position = "jitter", color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generation", y = "Mean Fitness")
g8 <-
graph8base +
geom_point(color = "orchid2") +
geom_line(data = RICHARD, color = "skyblue1") +
theme_classic() +
labs(x = "Generations", y = "Distance to the optima") +
ylim(-41, -39) +
theme(legend.position = "none")
lay <- rbind(c(1,1,1,2,2,2,3,3,3,4,4,4),
c(5,5,5,5,6,6,6,6,7,7,7,7),
c(5,5,5,5,6,6,6,6,7,7,7,7))
#to plot
grid.arrange(g1, g2, g3, g4, g5, g6, g7, layout_matrix = lay)
ggsave("Facetted_graphs_acrossreps.png")
ggsave("Facetted_graphs_acrossreps_test.png")
lay <- rbind(c(1,1,1,2,2,2,3,3,3,4,4,4),
c(5,5,5,5,6,6,6,6,7,7,7,7),
c(5,5,5,5,6,6,6,6,7,7,7,7))
#to plot
grid.arrange(g1, g2, g3, g4, g5, g6, g7, layout_matrix = lay)
#to save
g <- arrangeGrob(g1, g2, g3, g4, g5, g6, g7, layout_matrix = lay)
ggsave(file = paste0("Facet_graphs_acrossreps_",j, "_", i, ".png"), g, device = "png")
# Graph 2: same walks but facetted with their replicate walks (shelldons) behind them
# lets make this facetted
#ode
ODEHigh <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptHigh, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptHigh, aes( x = Generation, y = BConc), color = "red") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODEMed <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptMed, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptMed, aes( x = Generation, y = BConc), color = "yellow2") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODELow <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_BOptLow, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_BOptLow, aes( x = Generation, y = BConc), color = "yellowgreen") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
ODENeutral <- adaptivewalkbase +
geom_line(data = Shelldon_ODE_Neutral, aes(x = Generation, y = BConc, group = UniqueCombo, color = UniqueCombo), color = "grey") +
geom_line(data = Richard_ODE_Neutral, aes( x = Generation, y = BConc), color = "red") +
theme_classic() +
guides(fill = "none") +
labs(x = "Generation", y = "Mean BConc" )
grid.arrange(ODEHigh, ODEMed, ODELow, ODENeutral,
#ADDHigh, ADDMed, ADDLow, ADDNeutral,
layout_matrix = lay)
ggsave(paste0("Adaptive Walks.png"), device = "png")
lay <- rbind(c(1,2),
lay <- rbind(c(1,2),
c(3, 4),
# c(5,6,),
#c(7, 8)
)
grid.arrange(ODEHigh, ODEMed, ODELow, ODENeutral,
#ADDHigh, ADDMed, ADDLow, ADDNeutral,
layout_matrix = lay)
lay <- rbind(c(1,2),
c(3, 4)
# c(5,6,),
#c(7, 8)
)
grid.arrange(ODEHigh, ODEMed, ODELow, ODENeutral,
#ADDHigh, ADDMed, ADDLow, ADDNeutral,
layout_matrix = lay)
ggsave(paste0("Adaptive Walks.png"), device = "png")
gg <- arrangeGrob(ODEHigh, ODEMed, ODELow, ODENeutral,
#ADDHigh, ADDMed, ADDLow, ADDNeutral,
layout_matrix = lay)
ggsave(file = paste0("Adaptive Walks.png"), gg, device = "png")
