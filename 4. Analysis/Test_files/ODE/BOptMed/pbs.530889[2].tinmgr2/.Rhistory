dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
plot(x = dat[[2]][[1]]$time, y = dat[[2]][[1]]$B)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 2,
Abeta = 0.5,
Balpha = 1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 1,
Abeta = 0.5,
Balpha = 1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 0.1,
Abeta = 0.5,
Balpha = 1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = -1,
Abeta = 0.5,
Balpha = 1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 1,
Abeta = -0.5,
Balpha = 1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 1,
Abeta = -5,
Balpha = 1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 1,
Abeta = -5,
Balpha = -1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = 1,
Abeta = 5,
Balpha = -1,
Bbeta = 0.5,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = 100)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat
params <- read.csv("C:\Users\sknie\github\honours\NAR\_HPC\Extras\Latinhypercube_100.csv")
params <- read.csv("~Users\sknie\github\honours\NAR\_HPC\Extras\Latinhypercube_100.csv")
params <- read.csv("~/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_100.csv")
params <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_100.csv")
View(params)
View(raw_dat)
View(params)
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_100.csv")
View(param)
param[6] <- NULL
View(param)
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$value)) {
dat$integral_out[h] = (AUC(dat[[2]][[h]]$time,
dat[[2]][[h]]$B,
absolutearea = TRUE))
}
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$vAalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
View(dat)
View(dat[[6]][[1]])
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_50.csv")
param[6] <- NULL
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_20.csv")
param[6] <- NULL
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
param[5] <- 100
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_50.csv")
param[6] <- NULL
param[5] <- 100
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_100.csv")
param[6] <- NULL
param[5] <- 100
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
View(dat)
plot(dat$integral_out)
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_20.csv")
param[6] <- NULL
param[5] <- 100
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
plot(dat$integral_out)
View(dat)
View(dat[[6]][[7]])
average(dat$integral_out)
mean(dat$integral_out)
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_50.csv")
param[6] <- NULL
param[5] <- 100
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
plot(dat$integral_out)
mean(dat$integral_out)
param <- read.csv("/Users/sknie/github/honours/NAR/_HPC/Extras/Latinhypercube_100.csv")
param[6] <- NULL
param[5] <- 100
raw_dat <- as_tibble(param)
#ODE-OUT contains nested tibbles with the ODE-output, which is saved as.numeric so that it remains attribute-free data
dat <- raw_dat %>%
rowwise() %>%
mutate(ode_out = list(as_tibble(ode(y = state,
times = times,
func = Freya,
parms = c(Aalpha = Aalpha,
Abeta = Abeta,
Balpha = Balpha,
Bbeta = Bbeta,
Xstart = 1,
Xstop = 6,
Bthreshold = 0.2,
Hilln = Hilln)))
%>%
mutate_all(.funs = as.numeric)))
dat$integral_out = 0
dat$integral_outt = for (h in 1:length(dat$Aalpha)) {
dat$integral_out[h] = (AUC(dat[[6]][[h]]$time,
dat[[6]][[h]]$B,
absolutearea = TRUE))
}
dat
plot(dat$integral_out)
mean(dat$integral_out)
setwd(C:\Users\sknie\github\honours\4. Analysis\Test_files\ODE\BOptHigh\pbs.530888[1].tinmgr2)
setwd("C:\Users\sknie\github\honours\4. Analysis\Test_files\ODE\BOptHigh\pbs.530888[1].tinmgr2")
setwd("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.530889[1].tinmgr2")
setwd("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.530889[1].tinmgr2")
#user input here!
JOBID <- 5308809
NODE <- 1
WD <- paste0(JOBID,[, NODE, ])
WD <- paste0(JOBID,"[", NODE, "]")
#working directory
setwd(paste0("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.", WD, ".tinmgr2")
getwd()
#working directory
setwd(paste0("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.", WD, ".tinmgr2"))
getwd()
#user input here!
JOBID <- 5308809
NODE <- 2
WD <- paste0(JOBID,"[", NODE, "]")
#working directory
setwd(paste0("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.", WD, ".tinmgr2"))
getwd()
getwd()
#user input here!
JOBID <- 5308809
NODE <- 2
WD <- paste0(JOBID,"[", NODE, "]")
#working directory
setwd(paste0("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.", WD , ".tinmgr2"))
workdirectory <- paste0("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.", WD , ".tinmgr2")
workdirectory
#working directory
setwd(workdirectory)
#user input here!
JOBID <- 530889
NODE <- 2
WD <- paste0(JOBID,"[", NODE, "]")
workdirectory <- paste0("C:/Users/sknie/github/honours/4. Analysis/Test_files/ODE/BOptMed/pbs.", WD , ".tinmgr2")
workdirectory
#working directory
setwd(workdirectory)
getwd()
#2. Files
#could put in a for loop to change these depending on the model type, for now ODE
seeds <- read.csv("C:/Users/sknie/github/honours/3. HPC/OutbackRuns/ODE/seeds.csv")
View(seeds)
combos <-read.csv("C:/Users/sknie/github/honours/3. HPC/OutbackRuns/ODE/combos.csv")
combos <-read.csv("C:/Users/sknie/github/honours/3. HPC/OutbackRuns/ODE/combo.csv")
View(combos)
