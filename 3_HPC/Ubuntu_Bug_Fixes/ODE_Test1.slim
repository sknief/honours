///////////////////////////////////////////////////////////////////////
// [ODE MODEL] Negative Autoregulation Motif code
// Version: 1.0 [Based on NAR_ADD_v2.0]
// Author: Stella M. S. Knief
// Work in progress started on 03/07/21
// Created for Honours 2021
/////////////////////////////////////////////////////////////////////
//all output apart from the plot images will be in the central work folder -
//plots cannot be moved due to writeTempFile specifications


//FUNCTIONS?
//reading in table functions (from pg 380 of manual)
function (i)readIntTable(s$ path)
{
	if (!fileExists(path))
		stop("readIntTable(): File not found at path " + path);
	l = readFile(path);
	m = sapply(l, "asInteger(strsplit(applyValue));", simplify="matrix");
	return t(m);
}


function (void) setCfgParam (s$ name, ifls value) // setup function for automating constant definitions between gui and command line
{
	if (!exists(name))
		defineConstant(name, value);
}


//START COMMANDS
initialize() {
	initializeSLiMOptions(keepPedigrees=T);
		setCfgParam("modelindex", 1);


		// find Rscript (for the functionality)
		 	if (fileExists("/usr/lib/R/bin/Rscript"))
		  		setCfgParam("RSCRIPT", "/usr/lib/R/bin/Rscript");
		 	else if (fileExists("/usr/bin/Rscript"))
		  		setCfgParam("RSCRIPT", "/usr/bin/Rscript");
		 	else
		  		stop("Couldn't find Rscript.");



	//find RScript (as in my code)
	setCfgParam("magiccode", "~/OutbackRuns/ODE/ODE_SCRIPT.r");

	//seeding
	setCfgParam("seed", asInteger(round(runif(1, 1, 2^62 - 1))));	// random seed
	setSeed(asInteger(seed));

	//section A: constants
	setCfgParam("BOpt", 50); //test value: 250
	setCfgParam("AbetaINI", 50); //test value: 50; some limits in terms of values this can take
	setCfgParam("AalphaINI", 20); //test value: 20
	setCfgParam("HillnINI", 10); //test value: 10
	setCfgParam("BbetaINI", 15); //test value: 15
	setCfgParam("BalphaINI", 10); //test value: 10
	setCfgParam("S", 2); //selection coeff

	//Section AA: Recombination
	ends = c(99, 1099, 1199, 2199, 2299, 3299, 3399, 4399, 4499, 5499, 5599);
	rates = c(1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8);
	initializeRecombinationRate(rates, ends);

	//section B: mutations
	initializeMutationRate(6.3e-5);
	//null model mutations all based on neutral distributions
	//these distributions are bounded at -1 and 1, hence this scripttextile:
	script = "x = rnorm(1, 0, 0.5); if (x <= -1) return -0.5; else if (x >= 1) return 0.5; else return x;";
	//each region has their own mutationtype
		//Abeta
		initializeMutationType("m1", 0.5, "s", script);
		m1.color = "lightblue";
		m1.convertToSubstitution = T;
		//Aalpha
		initializeMutationType("m2", 0.5, "s", script);
		m2.convertToSubstitution = T;
		m2.color = "pink";
		//Bbeta
		initializeMutationType("m3", 0.5, "s", script);
		m3.convertToSubstitution = T;
		m3.color = "pink";
		//Balpha
		initializeMutationType("m4", 0.5, "s", script);
		m4.convertToSubstitution = T;
		m4.color = "lightblue";
		//non-coding
		initializeMutationType("m5", 0.5, "s", script);
		m5.convertToSubstitution = T;
		m5.color = "grey";

	//section C: genomic elements
	initializeGenomicElementType("g5", m5, 1.0); //non-coding
	initializeGenomicElementType("g1", m1, 1.0); //Abeta
	initializeGenomicElementType("g2", m2, 1.0); //Aalpha
	initializeGenomicElementType("g3", m3, 1.0); //Bbeta
	initializeGenomicElementType("g4", m4, 1.0); //Balpha

	//section D: chromosome structure
	initializeGenomicElement(g5, 0, 99);
	initializeGenomicElement(g1, 100, 1099); //Abeta
	initializeGenomicElement(g5, 1100, 1199); //spacer
	initializeGenomicElement(g2, 1200, 2199); //Aalpha
	initializeGenomicElement(g5, 2200, 2299); //spacer
	initializeGenomicElement(g5, 2300, 3299); //spacer
	initializeGenomicElement(g5, 3300, 3399); //spacer
	initializeGenomicElement(g3, 3400, 4399); //Bbeta
	initializeGenomicElement(g5, 4400, 4499); //spacer
	initializeGenomicElement(g4, 4500, 5499); //Balpha
	initializeGenomicElement(g5, 5500, 5599); //end spacer

	//section DD: colorcoding
	g5.color = "darkgrey";
	g1.color = "firebrick";
	g2.color = "firebrick";
	g3.color = "yellow";
	g4.color = "yellow";
}


//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 1000);
}

///////////////////////////////////////////////////////////////////////////////
//the code above is not to be changed! (Apart from params for models)
///////////////////////////////////////////////////////////////////////////////

//FITNESS CALLBACKS + CALCULATIONS

2:5000 early() {

	//read in files:
	//remember files need to contain generation 0 info for this to work
	ODE = readIntTable(asString(paste0("ODEoutput_", seed, "_", modelindex,".txt")));

	for (ind in sim.subpopulations.individuals) {
		hh = ind.index;
		ind.setValue("ODEVAL", ODE[hh,1]);
		ind.setValue("AConc", ODE[hh, 2]);
		ODEVAL = ind.getValue("ODEVAL");
		AConc = ind.getValue("AConc");
		//print("Individual value: " + ODEVAL);

		fitnessfunction = exp(-((ODEVAL-BOpt)/S)^2);

		//fitnessScaling callback to avoid SLiM bug
		if (fitnessfunction == 0) {
			ind.fitnessScaling = fitnessfunction + 0.1;
					//print("WHOOPSIE");
			ind.tag = 0; }
		else
			ind.fitnessScaling = fitnessfunction;
		}


	inds = sim.subpopulations.individuals;
	//print("Here's the mean ODEVAL!");
	//print(mean(inds.getValue("ODEVAL")));
	//print("Success!");

	}


//make non-coding neutral
fitness(m5) { return 1.0; }

fitness(NULL) {
	if (individual.tag == 0)
		return 0.0;
	else
		return relFitness;
}



1:5000 late() {
	sim.subpopulations.individuals.tag = 1;
	lines = NULL;

	for (ind in sim.subpopulations.individuals) {

		ID = ind.index;
		Aalpha = AalphaINI * exp(ind.sumOfMutationsOfType(m2));
		Abeta = AbetaINI  * exp(ind.sumOfMutationsOfType(m1));
		Balpha = BalphaINI * exp(ind.sumOfMutationsOfType(m4));
		Bbeta = BbetaINI * exp(ind.sumOfMutationsOfType(m3));
		gen = sim.generation;

		//export section #1: accumulation of individual data
		paramstoexport = paste0(ID, ", ",
										Aalpha,", ",
										Abeta, ", ",
										Balpha, ", ",
										Bbeta, ", ",
										gen, ", ",
										seed);
		//print(paramstoexport);
		lines = c(lines, paramstoexport);
		}

	//export section #2: writing one file per generation
	gen = sim.generation;
	writeFile(asString(paste0("SLiM-output_", seed, "_", modelindex, ".csv")), lines);

	//export section #3: sending it to R
	system(paste("/usr/bin/Rscript ~/OutbackRuns/ODE/ODE_SCRIPT.r", asString(seed), modelindex));

}


/////////////////////////////////////////////////////////

//update plots

1:5000 late() {
	// choose when to update plots below
	if (sim.generation % 100 != 0) return;

	//debug-puposes only: sim.outputFull();
	//Report mean phenotypes
	inds = sim.subpopulations.individuals;
	meanNetwork = mean(inds.getValue("ODEVAL"));
	meanACONC = mean(inds.getValue("AConc"));
	meandivision = meanACONC/meanNetwork;
	//Actual Output Code
	catn();
	catn();
	catn("Generation: " + sim.generation);
	catn("Mean A Totals: " + meanACONC);
	catn("Mean B CONC: " + meanNetwork);
	catn("Mean correlation " + meandivision);
	catn();
	catn();
	}


1:5000 late() {
	// choose when to print mutation data
	if (sim.generation % 500 != 0) return;

	gen = sim.generation;
	sim.outputFull("SLiMulation_Output_Mutations_" + seed + "_" + modelindex + "_" + gen + ".txt");
}

5000 late() {
sim.outputFull("SLiMulation_Output_Full_" + seed + "_" + modelindex + "5000_.txt");
sim.outputFixedMutations("SLiMulation_Output_FixedMutations_" + seed + "_" + modelindex + ".txt");
}
