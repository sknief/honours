//////////////////////////////////////////////////////////////////////
//  fixes here: new optima, new gene params and changed fitness function location
/////////////////////////////////////////////////////////////////////


function (void) setCfgParam (s$ name, ifls value) // setup function for automating constant definitions between gui and command line
{
	if (!exists(name))
		defineConstant(name, value);
}


//START COMMANDS
initialize() {
	initializeSLiMOptions(keepPedigrees=T);

	setCfgParam("seed", asInteger(round(runif(1, 1, 2^62 - 1))));	// random seed
	setSeed(asInteger(seed));
	setCfgParam("modelindex", 1);




	//section A: constants
	setCfgParam("BOpt", 100);
	setCfgParam("GeneA1", 41.93);
	setCfgParam("GeneA2", 48.99);
	setCfgParam("GeneB1", 44.9);
	setCfgParam("GeneB2", 10);
	setCfgParam("deltaT", 6);
	setCfgParam("S", 2); //selection coeff


	//Section AA: Recombination
	ends = c(99, 1099, 1199, 2199, 2299, 3299, 3399, 4399, 4499, 5499, 5599);
	rates = c(1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8);
	initializeRecombinationRate(rates, ends);

	//section B: mutations
	initializeMutationRate(6.3e-5);
	//null model mutations all based on neutral distributions
	//these distributions are bounded at -1 and 1, hence this scripttextile:
	script = "x = rnorm(1, 0, 0.5); if (x <= -1) return -0.5; else if (x >= 1) return 0.5; else return x;";
	//each region has their own mutationtype
	//GeneA1
	initializeMutationType("m1", 0.5, "s", script);
	m1.color = "lightblue";
	m1.convertToSubstitution = T;
	//GeneA2
	initializeMutationType("m2", 0.5, "s", script);
	m2.convertToSubstitution = T;
	m2.color = "pink";
	//GeneB1
	initializeMutationType("m3", 0.5, "s", script);
	m3.convertToSubstitution = T;
	m3.color = "pink";
	//GeneB2
	initializeMutationType("m4", 0.5, "s", script);
	m4.convertToSubstitution = T;
	m4.color = "lightblue";
	//non-coding
	initializeMutationType("m5", 0.5, "s", script);
	m5.convertToSubstitution = T;
	m5.color = "grey";
	//section C: genomic elements
	initializeGenomicElementType("g5", m5, 1.0); //non-coding
	initializeGenomicElementType("g1", m1, 1.0); //GeneA1
	initializeGenomicElementType("g2", m2, 1.0); //GeneA2
	initializeGenomicElementType("g3", m3, 1.0); //GeneB1
	initializeGenomicElementType("g4", m4, 1.0); //GeneB2

	//section D: chromosome structure
	initializeGenomicElement(g5, 0, 99);
	initializeGenomicElement(g1, 100, 1099); //GeneA1
	initializeGenomicElement(g5, 1100, 1199); //spacer
	initializeGenomicElement(g2, 1200, 2199); //GeneA2
	initializeGenomicElement(g5, 2200, 2299); //spacer
	initializeGenomicElement(g5, 2300, 3299); //spacer
	initializeGenomicElement(g5, 3300, 3399); //spacer
	initializeGenomicElement(g3, 3400, 4399); //GeneB1
	initializeGenomicElement(g5, 4400, 4499); //spacer
	initializeGenomicElement(g4, 4500, 5499); //GeneB2
	initializeGenomicElement(g5, 5500, 5599); //end spacer

	//section DD: colorcoding
	g5.color = "darkgrey";
	g1.color = "firebrick";
	g2.color = "firebrick";
	g3.color = "yellow";
	g4.color = "yellow";
}


//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 1000);
}


//FITNESS CALLBACKS + CALCULATIONS
//make non-coding neutral
fitness(m5) { return 1.0; }

// individuals tagged have fitnessScaling = 0, which will cause SLiM to throw a fit;
// give them either minimal fitness (0.1) to push them beyond extreme bounds, or
// give them lethal fitness (0), to make sure that anything beyond the fitness function counts as lethal
// biologically speaking i'd prefer lethal ftiness, but ask Jan which one is better
fitness(NULL) {
	if (individual.tag == 0)
		return 0.0;
	else
		return relFitness;
}

//late code that calculates the protein concentrations and bases fitness on them
1:50000 late() {
	//all individuals receive an initial tag ( 1= survival)
	sim.subpopulations.individuals.tag = 1;
	lines = NULL;

	for (ind in sim.subpopulations.individuals) {
		//code for the concentration of A
		GeneA1T = GeneA1 * exp(ind.sumOfMutationsOfType(m1));
		GeneA2T = GeneA2  * exp(ind.sumOfMutationsOfType(m2));
		GeneATotal = GeneA1T - GeneA2T;
		ind.setValue("ATotals", GeneATotal);

		//code for the concentration of B
		GeneB1T = GeneB1 * exp(ind.sumOfMutationsOfType(m3));
		GeneB2T = GeneB2 * exp(ind.sumOfMutationsOfType(m4));
		BGamma = GeneB1T - GeneB2T + GeneATotal;
		BConc = BGamma * deltaT;
		ind.setValue("Bconcentration", BConc);

		ID = ind.index;
		gen = sim.generation;

		//export section #1: accumulation of individual data
		paramstoexport = paste0(ID, ", ",
			GeneA1T,", ",
			GeneA2T, ", ",
			GeneB1T, ", ",
			GeneB2T, ", ",
			GeneATotal, ", ",
			BGamma, ", ",
			BConc, ", ",
			gen, ", ",
			seed);
		//print(paramstoexport);
		lines = c(lines, paramstoexport);

		if (BConc < 0) {
			//print("EEK");
			ind.tag = 0;
		}
		//the stabilising selection function
		fitnessfunction = exp(-((BConc-BOpt)/S)^2);

		//fitnessScaling callback to avoid SLiM bug
		if (fitnessfunction == 0) {
			ind.fitnessScaling = fitnessfunction + 0.1;
			//print("WHOOPSIE");
			ind.tag = 0;
		}
		else
			ind.fitnessScaling = fitnessfunction;

	}



	//export section #2: writing one file per generation
	gen = sim.generation;
	writeFile(asString(paste0("SLiM-output_ADD_", seed, "_", modelindex, "_", gen, ".csv")), lines);
}


1:50000 late() {
	// choose when to update plots below
	if (sim.generation % 10 != 0) return;

	//debug-puposes only: sim.outputFull();
	//Report mean phenotypes
	inds = sim.subpopulations.individuals;
	meanNetwork = mean(inds.getValue("Bconcentration"));
	meanACONC = mean(inds.getValue("ATotals"));
	meandivision = meanACONC/meanNetwork;
	//Actual Output Code
	catn();
	catn();
	catn("Generation: " + sim.generation);
	catn("Mean A Totals: " + meanACONC);
	catn("Mean B CONC: " + meanNetwork);
	catn("Mean correlation " + meandivision);
	catn();
	catn();
	}


1:50000 late() {
	// choose when to print mutation data
	if (sim.generation % 500 != 0) return;

	gen = sim.generation;
	sim.outputFull("SLiMulation_Output_Mutations_" + seed + "_" + modelindex + "_" + gen + ".txt");
}

50000 late() {
	sim.outputFull("SLiMulation_Output_Full_" + seed + "_" + modelindex + "50000_.txt");
	sim.outputFixedMutations("SLiMulation_Output_FixedMutations_" + seed + "_" + modelindex + ".txt");
}
