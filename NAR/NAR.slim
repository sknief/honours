///////////////////////////////////////////////////////////////////////
// Negative Autoregulation Motif code
// Author: Stella M. S. Knief
// Work in Progress as of 23/04/2021
// Created for Honours 2021
/////////////////////////////////////////////////////////////////////

//Going to base this off my digital yeast code for the start

//START COMMANDS
initialize() {

	//section A: constants
	//defineConstant("K", value); //comment
	//for the mutations
	defineConstant("DelRatio", 0.25); //proportion of deleterious mutations
	defineConstant("BenRatio", 0.15); //proportion of beneficial mutations
	defineConstant("NeuRatio", 0.6); //proportion of neutral mutations
	//for the initial parameter values
	defineConstant("Abeta", 0.5); //values from Jans model
	defineConstant("Aalpha", 1); //see above
	defineConstant("Ahillcoeff", 1000); //see above
	defineConstant("Bbeta", 0.5); //see above
	defineConstant("Balpha", 1); //see above

	//Section AA: Recombination
	// do i need any recombination? i got the code in here just in case but hmm, up for discussion
	ends = c(6250, 6251, 10999);
	rates = c(1e-8, 0.5, 1e-8);
	initializeRecombinationRate(rates, ends);

	//section B: mutations
	initializeMutationRate(1e-7);
	//neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.color = "yellow";
	m1.convertToSubstitution = T;
	//deleterious
	initializeMutationType("m2", 0.5, "g", -0.03, 0.2); //updated according to manual
	m2.convertToSubstitution = T;
	m2.color = "red";
	//beneficial
	initializeMutationType("m3", 0.5, "e", 0.1); //see page 137
	m3.convertToSubstitution = T;
	m3.color = "green";

	//section C: genomic elements
	initializeGenomicElementType("g1", m1, 1.0); //non-coding
	initializeGenomicElementType("g2", c(m1,m2,m3), c(NeuRatio, DelRatio, BenRatio)); //Abeta
	initializeGenomicElementType("g3", c(m1,m2,m3), c(NeuRatio, DelRatio, BenRatio)); //Aalpha
	initializeGenomicElementType("g4", c(m1,m2,m3), c(NeuRatio, DelRatio, BenRatio)); //Ahillcoeff
	initializeGenomicElementType("g5", c(m1,m2,m3), c(NeuRatio, DelRatio, BenRatio)); //Bbeta
	initializeGenomicElementType("g6", c(m1,m2,m3), c(NeuRatio, DelRatio, BenRatio)); //Balpha

	//section D: chromosome structure
	initializeGenomicElement(g1, 0, 1999);
	initializeGenomicElement(g2, 2000, 2999); //Abeta
	initializeGenomicElement(g1, 3000, 3499); //spacer
	initializeGenomicElement(g3, 3500, 4499); //Aalpha
	initializeGenomicElement(g1, 4500, 4999); //spacer
	initializeGenomicElement(g4, 5000, 5999); //Ahillcoeff
	initializeGenomicElement(g1, 6000, 6499); //spacer
	initializeGenomicElement(g5, 6500, 7499); //Bbeta
	initializeGenomicElement(g1, 7500, 7999); //spacer
	initializeGenomicElement(g6, 8000, 8999); //Balpha
	initializeGenomicElement(g1, 9000, 10999); //end spacer

	//section DD: colorcoding
	g1.color = "darkgrey";
	g2.color = "firebrick";
	g3.color = "firebrick";
	g4.color = "firebrick";
	g5.color = "tan3";
	g6.color = "tan3";

	//section E: advanced behaviour / mechanics

}
//initialize command bracket ends here

//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 100);
}

//okay, heres the money maker:
early() {
 for (ind in sim.subpopulations.individuals) {
		AAD = ind.sumOfMutationsOfType(m2);
		AAB = ind.sumOfMutationsOfType(m3);
		AAT = (Aalpha + AAD + AAT);
	}
}

//output / testing block
late() {
	test1 = sample(AAD, 10, T);
	test2 = sample(AAB, 10, T);
	test1 = sample(AAT, 10, T);

	cat("\n" + test1 + test2 + test3 + "\n")
}

200000 late() {
	sim.outputFull();
}
