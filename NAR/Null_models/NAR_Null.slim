///////////////////////////////////////////////////////////////////////
// [NULL MODEL] Negative Autoregulation Motif code
// Version: 1 (WF Null distributions)
// Author: Stella M. S. Knief
// Work in Progress as of 06/06/2021
// Created for Honours 2021
/////////////////////////////////////////////////////////////////////

/*Important Model Notes:
	Trait under selection is BConc, the concentration of B
	This version of the code simulates stabilising selection, with an
	optimum value of BOpt

*/


//START COMMANDS
initialize() {

	//section A: constants
	defineConstant("BOpt", 10); //check this value later
	defineConstant("AbetaINI", 2); //values from Jans model
	defineConstant("AalphaINI", 1); //see above
	defineConstant("AhillcoeffINI", 10); //see above
	defineConstant("BbetaINI", 0.5); //see above
	defineConstant("BalphaINI", 1); //see above

	//Section AA: Recombination
		ends = c(6250, 6251, 10999);
		rates = c(1e-8, 0.5, 1e-8);
		initializeRecombinationRate(rates, ends);

	//section B: mutations
		initializeMutationRate(1e-8);
		//null model mutations all based on neutral distributions
		//each region has their own mutationtype
		//Abeta
		initializeMutationType("m1", 0.5, "n", 0.0, 0.5);
		m1.color = "lightblue";
		m1.convertToSubstitution = T;
		//Aalpha
		initializeMutationType("m2", 0.5, "n", 0.0, 0.5);
		m2.convertToSubstitution = T;
		m2.color = "pink";
		//Ahillcoeff
		initializeMutationType("m3", 0.5, "n", 0.0, 0.5);
		m3.convertToSubstitution = T;
		m3.color = "white";
		//Bbeta
		initializeMutationType("m4", 0.5, "n", 0.0, 0.5);
		m4.convertToSubstitution = T;
		m4.color = "pink";
		//Balpha
		initializeMutationType("m5", 0.5, "n", 0.0, 0.5);
		m5.convertToSubstitution = T;
		m5.color = "lightblue";
		//non-coding
		initializeMutationType("m6", 0.5, "f", 0.5);
		m6.convertToSubstitution = T;
		m6.color = "grey";

	//section C: genomic elements
		initializeGenomicElementType("g1", m6, 1.0); //non-coding
		initializeGenomicElementType("g2", m1, 1.0); //Abeta
		initializeGenomicElementType("g3", m2, 1.0); //Aalpha
		initializeGenomicElementType("g4", m3, 1.0); //Ahillcoeff
		initializeGenomicElementType("g5", m4, 1.0); //Bbeta
		initializeGenomicElementType("g6", m5, 1.0); //Balpha

	//section D: chromosome structure
		initializeGenomicElement(g1, 0, 1999);
		initializeGenomicElement(g2, 2000, 2999); //Abeta
		initializeGenomicElement(g1, 3000, 3499); //spacer
		initializeGenomicElement(g3, 3500, 4499); //Aalpha
		initializeGenomicElement(g1, 4500, 4999); //spacer
		initializeGenomicElement(g4, 5000, 5999); //Ahillcoeff
		initializeGenomicElement(g1, 6000, 6499); //spacer
		initializeGenomicElement(g5, 6500, 7499); //Bbeta
		initializeGenomicElement(g1, 7500, 7999); //spacer
		initializeGenomicElement(g6, 8000, 8999); //Balpha
		initializeGenomicElement(g1, 9000, 10999); //end spacer

	//section DD: colorcoding
		g1.color = "darkgrey";
		g2.color = "firebrick";
		g3.color = "firebrick";
		g4.color = "firebrick";
		g5.color = "yellow";
		g6.color = "yellow";

	//section E: advanced behaviour / mechanics

}
//initialize command bracket ends here

//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 200);
}

/fitness code
1: late() {
	for (ind in sim.subpopulations.individuals) {
		//code for the concentration of A
		Aalpha = AalphaINI + (ind.sumOfMutationsOfType(m2) * AalphaINI);
		Abeta = AbetaINI  + (ind.sumOfMutationsOfType(m1) * AbetaINI);
		AConc = Aalpa - Abeta;
		ind.setvalue("Aconcentration", AConc);


		//code for the concentration of B
		Balpha = BalphaINI + (ind.sumOfMutationsOfType(m5) * BalphaINI)
		Bbeta = BbetaINI + (ind.sumOfMutationsOfType(m4) * BbetaINI)
		BConc = [Balpha * AConc] - Balpha;
		ind.setvalue("Bconcentration", BConc);
		//i dont need to set all of these as values to thr individual right?

	 	//fitnessScaling
		inds.fitnessScaling = 1.0 + ((abs(BOpt - BConc)*(-1))/BOpt)
		//penalty system that punishes any deviance from Bopt

		//add in if statement that sets fitness to 1.5 if Bopt = BConc?
		//maybe use tags for that? 
	}

	if (sim.generation % 100 != 0) return;

	//output code to test the values
	inds = sim.subpopulations.individuals;
	data = cbind(inds.index, inds.getValue("Aconcentration"), inds.getValue("Bconcentration"));
	print("Here are your values:");
	print(sample(data, 10);

}

200 late() {
	sim.outputFull();
}
