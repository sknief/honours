///////////////////////////////////////////////////////////////////////
// [ODE MODEL] Negative Autoregulation Motif code
// Version: 1.0 [Based on NAR_ADD_v2.0]
// Author: Stella M. S. Knief
// Work in progress started on 03/07/21
// Created for Honours 2021
/////////////////////////////////////////////////////////////////////



//FUNCTIONS?
//reading in table functions (from pg 380 of manual)
function (i)readIntTable(s$ path)
{
	if (!fileExists(path))
		stop("readIntTable(): File not found at path " + path);
	l = readFile(path);
	m = sapply(l, "asInteger(strsplit(applyValue));", simplify="matrix");
	return t(m);
}


//START COMMANDS
initialize() {
	initializeSLiMOptions(keepPedigrees=T);

	defineConstant("seed", asInteger(round(runif(1, 1, 2^62 - 1))));	// random seed
	setSeed(asInteger(seed));

	//section A: constants
	defineConstant("BOpt", 18); //test value: 250
	defineConstant("AbetaINI", 50); //test value: 50; some limits in terms of values this can take
	defineConstant("AalphaINI", 20); //test value: 20
	defineConstant("K", 10); //test value: 10
	defineConstant("BbetaINI", 15); //test value: 15
	defineConstant("BalphaINI", 10); //test value: 10
	defineConstant("S", 2); //selection coeff

	//Section AA: Recombination
	ends = c(6250, 6251, 10999);
	rates = c(1e-8, 0.5, 1e-8);
	initializeRecombinationRate(rates, ends);

	//section B: mutations
	initializeMutationRate(6.3e-6);
	//null model mutations all based on neutral distributions
	//these distributions are bounded at -1 and 1, hence this scripttextile:
	script = "x = rnorm(1, 0, 0.5); if (x <= -1) return -0.5; else if (x >= 1) return 0.5; else return x;";
	//each region has their own mutationtype
		//Abeta
		initializeMutationType("m1", 0.5, "s", script);
		m1.color = "lightblue";
		m1.convertToSubstitution = T;
		//Aalpha
		initializeMutationType("m2", 0.5, "s", script);
		m2.convertToSubstitution = T;
		m2.color = "pink";
		//K
		initializeMutationType("m3", 0.5, "s", script);
		m3.convertToSubstitution = T;
		m3.color = "white";
		//Bbeta
		initializeMutationType("m4", 0.5, "s", script);
		m4.convertToSubstitution = T;
		m4.color = "pink";
		//Balpha
		initializeMutationType("m5", 0.5, "s", script);
		m5.convertToSubstitution = T;
		m5.color = "lightblue";
		//non-coding
		initializeMutationType("m6", 0.5, "s", script);
		m6.convertToSubstitution = T;
		m6.color = "grey";

	//section C: genomic elements
	initializeGenomicElementType("g1", m6, 1.0); //non-coding
	initializeGenomicElementType("g2", m1, 1.0); //Abeta
	initializeGenomicElementType("g3", m2, 1.0); //Aalpha
	initializeGenomicElementType("g4", m3, 1.0); //K
	initializeGenomicElementType("g5", m4, 1.0); //Bbeta
	initializeGenomicElementType("g6", m5, 1.0); //Balpha

	//section D: chromosome structure
	initializeGenomicElement(g1, 0, 1999);
	initializeGenomicElement(g2, 2000, 2999); //Abeta
	initializeGenomicElement(g1, 3000, 3499); //spacer
	initializeGenomicElement(g3, 3500, 4499); //Aalpha
	initializeGenomicElement(g1, 4500, 4999); //spacer
	initializeGenomicElement(g4, 5000, 5999); //K
	initializeGenomicElement(g1, 6000, 6499); //spacer
	initializeGenomicElement(g5, 6500, 7499); //Bbeta
	initializeGenomicElement(g1, 7500, 7999); //spacer
	initializeGenomicElement(g6, 8000, 8999); //Balpha
	initializeGenomicElement(g1, 9000, 10999); //end spacer

	//section DD: colorcoding
	g1.color = "darkgrey";
	g2.color = "firebrick";
	g3.color = "firebrick";
	g4.color = "lightblue";
	g5.color = "yellow";
	g6.color = "yellow";
}


//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 100);
}

///////////////////////////////////////////////////////////////////////////////
//the code above is not to be changed! (Apart from params for models)
///////////////////////////////////////////////////////////////////////////////

//FITNESS CALLBACKS + CALCULATIONS

3 early() {
	//read in files:
	//remember files need to contain generation 0 info for this to work
	ODE = readIntTable("~/Desktop/NodeAoutput.txt");
	//ODE = asFloat(strsplit(ODE));
	//testing code:
	print("These are your values here:");
	print(ODE);
	val = isFloat(ODE);
	print("TRUE OR FALSE that we all  FLOAT down here?:" + val);


	for (ind in sim.subpopulations.individuals) {
		//this might throw errors cause its in an early callback but we can try
		//ODEVAL = ind.getValue("ODEVAL");

		hh = ind.index;
		ind.setValue("ODEVAL", ODE[hh,1]);
		ODEVAL = ind.getValue("ODEVAL");
		print(ODEVAL);

		fitnessfunction = exp(-((ODEVAL-BOpt)/S)^2);

		//fitnessScaling callback to avoid SLiM bug
		if (fitnessfunction == 0) {
			ind.fitnessScaling = fitnessfunction + 0.1;
					print("WHOOPSIE");
			ind.tag = 0; }
		else
			ind.fitnessScaling = fitnessfunction;
		}


	inds = sim.subpopulations.individuals;
	print(mean(inds.getValue("ODEVAL")));
	print("Success!");

	}




//make non-coding neutral
fitness(m6) { return 1.0; }

1:2000 late() {

	lines = NULL;

	for (ind in sim.subpopulations.individuals) {

		ID = ind.index;
		Aalpha = AalphaINI + (ind.sumOfMutationsOfType(m2) * AalphaINI);
		Abeta = AbetaINI  + (ind.sumOfMutationsOfType(m1) * AbetaINI);
		Balpha = BalphaINI + (ind.sumOfMutationsOfType(m5) * BalphaINI);
		Bbeta = BbetaINI + (ind.sumOfMutationsOfType(m4) * BbetaINI);
		Knew = K + (ind.sumOfMutationsOfType(m3) * K);

		//export section #1
		//paramstoexport = paste0(ID, ", ", Aalpha,", ", Abeta, ", ", Balpha, ", ", Bbeta, ", ", Knew);
		//print(paramstoexport);
		//lines = c(lines, paramstoexport);

		}

	//export section #2
	//gen = sim.generation;
	//writeFile(asString(paste0(c("ODE_MODEL_OUTPUT_", seed , "_", gen , "_params.csv"))), lines);
}


/////////////////////////////////////////////////////////
/*
//HISTORY PLOT CODE + OUTPUT CODE
//enable plots
1 early() {
	//[B Conc]/t plot code
	sim.setValue("history1", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath1", writeTempFile("plot_", ".png", ""));

	//[A Conc]/t plot code
	sim.setValue("history2", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath2", writeTempFile("plot_", ".png", ""));

	//[A Conc]/[B Conc] plot code
	sim.setValue("history3", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath3", writeTempFile("plot_", ".png", ""));

	if (exists("slimgui")) {
		slimgui.openDocument(pngPath1);
		slimgui.openDocument(pngPath2);
		slimgui.openDocument(pngPath3);
		}
}

//update plots
1:2000 late() {
	// choose when to update plots below
	if (sim.generation % 5 != 0) return;

	//debug-puposes only: sim.outputFull();

	//Report mean phenotypes
	inds = sim.subpopulations.individuals;
	meanNetwork = mean(inds.getValue("Bconcentration"));
	meanACONC = mean(inds.getValue("Aconcentration"));
	meandivision = meanACONC/meanNetwork;
	//Actual Output Code
	catn();
	catn();
	catn("Generation: " + sim.generation);
	catn("Mean A CONC: " + meanACONC);
	catn("Mean B CONC: " + meanNetwork);
	catn("Mean correlation " + meandivision);
	catn();
	catn();

	//[B Conc]/t plot code
	history1 = sim.getValue("history1");
	history1 = rbind(history1, c(sim.generation, meanNetwork));
	sim.setValue("history1", history1);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history1[,0], sep=", ") + ')',
		'y <- c(' + paste(history1[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath1 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="B CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath1 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath1);
	deleteFile(scriptPath1);

	//[A Conc]/t plot code
	history2 = sim.getValue("history2");
	history2 = rbind(history2, c(sim.generation, meanACONC));
	sim.setValue("history2", history2);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history2[,0], sep=", ") + ')',
		'y <- c(' + paste(history2[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath2 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="A CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath2 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath2);
	deleteFile(scriptPath2);

	//[A Conc]/[B Conc] plot code
	history3 = sim.getValue("history3");
	history3 = rbind(history3, c(sim.generation, meandivision));
	sim.setValue("history3", history3);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history3[,0], sep=", ") + ')',
		'y <- c(' + paste(history3[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath3 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="A CONC / B CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath3 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath3);
	deleteFile(scriptPath3);
}
*/
