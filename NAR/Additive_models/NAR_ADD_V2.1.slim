///////////////////////////////////////////////////////////////////////
// [ADDITIVE MODEL] Negative Autoregulation Motif code
// Version: 2.0 [Bug-free Release Version]
// Author: Stella M. S. Knief
// "Released" on 01/07/21
// Created for Honours 2021
/////////////////////////////////////////////////////////////////////
/*Important Model Notes:
	THIS IS THE ONE WHERE NODE B DOES NOT EXIST
*/


//START COMMANDS
initialize() {
	initializeSLiMOptions(keepPedigrees=T);

	//section A: constants
	defineConstant("AOpt", 100); //test value: 50; some limits in terms of values this can take
	defineConstant("AbetaINI", 50); //test value: 50; some limits in terms of values this can take
	defineConstant("AalphaINI", 20); //test value: 20
	defineConstant("S", 2); //selection coeff

	//Section AA: Recombination
	ends = c(6250, 6251, 10999);
	rates = c(1e-8, 0.5, 1e-8);
	initializeRecombinationRate(rates, ends);

	//section B: mutations
	initializeMutationRate(6.3e-6);
	//null model mutations all based on neutral distributions
	//these distributions are bounded at -1 and 1, hence this scripttextile:
	script = "x = rnorm(1, 0, 0.5); if (x <= -1) return -0.5; else if (x >= 1) return 0.5; else return x;";
	//each region has their own mutationtype
		//Abeta
		initializeMutationType("m1", 0.5, "s", script);
		m1.color = "lightblue";
		m1.convertToSubstitution = T;
		//Aalpha
		initializeMutationType("m2", 0.5, "s", script);
		m2.convertToSubstitution = T;
		m2.color = "pink";
		//non-coding
		initializeMutationType("m6", 0.5, "s", script);
		m6.convertToSubstitution = T;
		m6.color = "grey";

	//section C: genomic elements
	initializeGenomicElementType("g1", m6, 1.0); //non-coding
	initializeGenomicElementType("g2", m1, 1.0); //Abeta
	initializeGenomicElementType("g3", m2, 1.0); //Aalpha

	//section D: chromosome structure
	initializeGenomicElement(g1, 0, 1999);
	initializeGenomicElement(g2, 2000, 2999); //Abeta
	initializeGenomicElement(g1, 3000, 3499); //spacer
	initializeGenomicElement(g3, 3500, 4499); //Aalpha
	initializeGenomicElement(g1, 4500, 4999); //spacer
	initializeGenomicElement(g1, 5000, 10999); //end spacer

	//section DD: colorcoding
	g1.color = "darkgrey";
	g2.color = "firebrick";
	g3.color = "firebrick";
}


//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 100);
}


//FITNESS CALLBACKS + CALCULATIONS
//make non-coding neutral
fitness(m6) { return 1.0; }

// individuals tagged have fitnessScaling = 0, which will cause SLiM to throw a fit;
// give them either minimal fitness (0.1) to push them beyond extreme bounds, or
// give them lethal fitness (0), to make sure that anything beyond the fitness function counts as lethal
// biologically speaking i'd prefer lethal ftiness, but ask Jan which one is better
fitness(NULL) {
	if (individual.tag == 0)
		return 0.0;
	else
		return relFitness;
}

//late code that calculates the protein concentrations and bases fitness on them
1:2000 late() {
	//all individuals receive an initial tag ( 1= survival)
	sim.subpopulations.individuals.tag = 1;

	for (ind in sim.subpopulations.individuals) {
			//code for the concentration of A
			Aalpha = AalphaINI + (ind.sumOfMutationsOfType(m2) * AalphaINI);
			Abeta = AbetaINI  + (ind.sumOfMutationsOfType(m1) * AbetaINI);
			AConc = Abeta - Aalpha;
			ind.setValue("Aconcentration", AConc);

			//negative concentrations should be lethal (impossible!!)
			if (AConc < 0) {
				print("EEK");
				ind.tag = 0;
				}

			//the stabilising selection function
			fitnessfunction = exp(-((AConc-AOpt)/S)^2);

			//fitnessScaling callback to avoid SLiM bug
			if (fitnessfunction == 0) {
				ind.fitnessScaling = fitnessfunction + 0.1;
				print("WHOOPSIE");
				ind.tag = 0;
				}
			else
				ind.fitnessScaling = fitnessfunction;
	}
}


//HISTORY PLOT CODE + OUTPUT CODE
//enable plots
1 early() {
	//[A Conc]/t plot code
	sim.setValue("history2", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath2", writeTempFile("plot_", ".png", ""));

	if (exists("slimgui")) {
		slimgui.openDocument(pngPath2);
		}
}

//update plots
1:2000 late() {
	// choose when to update plots below
	if (sim.generation % 5 != 0) return;

	//debug-puposes only: sim.outputFull();

	//Report mean phenotypes
	inds = sim.subpopulations.individuals;
	meanACONC = mean(inds.getValue("Aconcentration"));
	//Actual Output Code
	catn();
	catn();
	catn("Generation: " + sim.generation);
	catn("Mean A CONC: " + meanACONC);
	catn();
	catn();

	//[A Conc]/t plot code
	history2 = sim.getValue("history2");
	history2 = rbind(history2, c(sim.generation, meanACONC));
	sim.setValue("history2", history2);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history2[,0], sep=", ") + ')',
		'y <- c(' + paste(history2[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath2 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="A CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath2 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath2);
	deleteFile(scriptPath2);

}
