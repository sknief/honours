//////////////////////////////////////////////////////////////////////
// [ADDITIVE MODEL] Negative Autoregulation Motif code
// Version: 2.3 [Reworked Additive Version]
// Author: Stella M. S. Knief
// "Released" on 11/07/21
// Created for Honours 2021
/////////////////////////////////////////////////////////////////////


function (void) setCfgParam (s$ name, ifls value) // setup function for automating constant definitions between gui and command line
{
	if (!exists(name))
		defineConstant(name, value);
}


//START COMMANDS
initialize() {
	initializeSLiMOptions(keepPedigrees=T);

	setCfgParam("seed", asInteger(round(runif(1, 1, 2^62 - 1))));	// random seed
	setSeed(asInteger(seed));


	//section A: constants
	setCfgParam("BOpt", 100);
	setCfgParam("GeneA1", 5);
	setCfgParam("GeneA2", 2);
	setCfgParam("GeneB1", 11);
	setCfgParam("GeneB2", 12);
	setCfgParam("deltaT", 6);
	setCfgParam("S", 2); //selection coeff

	//Section AA: Recombination
	ends = c(99, 1099, 1199, 2199, 2299, 3299, 3399, 4399, 4499, 5499, 5599);
	rates = c(1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8);
	initializeRecombinationRate(rates, ends);

	//section B: mutations
	initializeMutationRate(6.3e-5);
	//null model mutations all based on neutral distributions
	//these distributions are bounded at -1 and 1, hence this scripttextile:
	script = "x = rnorm(1, 0, 0.5); if (x <= -1) return -0.5; else if (x >= 1) return 0.5; else return x;";
	//each region has their own mutationtype
		//Abeta
		initializeMutationType("m1", 0.5, "s", script);
		m1.color = "lightblue";
		m1.convertToSubstitution = T;
		//Aalpha
		initializeMutationType("m2", 0.5, "s", script);
		m2.convertToSubstitution = T;
		m2.color = "pink";
		//K
		initializeMutationType("m3", 0.5, "s", script);
		m3.convertToSubstitution = T;
		m3.color = "white";
		//Bbeta
		initializeMutationType("m4", 0.5, "s", script);
		m4.convertToSubstitution = T;
		m4.color = "pink";
		//Balpha
		initializeMutationType("m5", 0.5, "s", script);
		m5.convertToSubstitution = T;
		m5.color = "lightblue";
		//non-coding
		initializeMutationType("m6", 0.5, "s", script);
		m6.convertToSubstitution = T;
		m6.color = "grey";
	//section C: genomic elements
	initializeGenomicElementType("g1", m6, 1.0); //non-coding
	initializeGenomicElementType("g2", m1, 1.0); //GeneA1
	initializeGenomicElementType("g3", m2, 1.0); //GeneA2
	initializeGenomicElementType("g5", m4, 1.0); //GeneB1
	initializeGenomicElementType("g6", m5, 1.0); //GeneB2

	//section D: chromosome structure
	initializeGenomicElement(g1, 0, 99);
	initializeGenomicElement(g2, 100, 1099);
	initializeGenomicElement(g1, 1100, 1199); //spacer
	initializeGenomicElement(g3, 1200, 2199);
	initializeGenomicElement(g1, 2200, 2299); //spacer
	initializeGenomicElement(g1, 2300, 3399); //spacer
	initializeGenomicElement(g5, 3400, 4399);
	initializeGenomicElement(g1, 4400, 4499); //spacer
	initializeGenomicElement(g6, 4500, 5499);
	initializeGenomicElement(g1, 5500, 5599); //end spacer


	//section DD: colorcoding
	g1.color = "darkgrey";
	g2.color = "firebrick";
	g3.color = "firebrick";
	g5.color = "yellow";
	g6.color = "yellow";
}


//POPULATION CODE
1 early() {
	sim.addSubpop("p1", 1000);
}


//FITNESS CALLBACKS + CALCULATIONS
//make non-coding neutral
fitness(m6) { return 1.0; }

// individuals tagged have fitnessScaling = 0, which will cause SLiM to throw a fit;
// give them either minimal fitness (0.1) to push them beyond extreme bounds, or
// give them lethal fitness (0), to make sure that anything beyond the fitness function counts as lethal
// biologically speaking i'd prefer lethal ftiness, but ask Jan which one is better
fitness(NULL) {
	if (individual.tag == 0)
		return 0.0;
	else
		return relFitness;
}

//late code that calculates the protein concentrations and bases fitness on them
//late code that calculates the protein concentrations and bases fitness on them
1:2000 late() {
	//all individuals receive an initial tag ( 1= survival)
	sim.subpopulations.individuals.tag = 1;
	lines = NULL;

	for (ind in sim.subpopulations.individuals) {
			//code for the concentration of A
			GeneA1T = GeneA1 + exp(ind.sumOfMutationsOfType(m1));
			GeneA2T = GeneA2  + exp(ind.sumOfMutationsOfType(m2));
			GeneATotal = GeneA1T + GeneA2T;
			ind.setValue("ATotals", GeneATotal);

			//code for the concentration of B
			GeneB1T = GeneB1 + exp(ind.sumOfMutationsOfType(m5));
			GeneB2T = GeneB2 + exp(ind.sumOfMutationsOfType(m4));
			BGamma = GeneB1T + GeneB2T + GeneATotal;
			BConc = BGamma * deltaT;
			ind.setValue("Bconcentration", BConc);

			ID = ind.index;
			gen = sim.generation;

			//export section #1: accumulation of individual data
			paramstoexport = paste0(ID, ", ",
											GeneA1T,", ",
											GeneA2T, ", ",
											GeneB1T, ", ",
											GeneB2T, ", ",
											gen, ", ",
											seed);
			//print(paramstoexport);
			lines = c(lines, paramstoexport);

			//negative concentrations should be lethal (impossible!!)
			if (BConc < 0) {
				print("EEK");
				ind.tag = 0;
				}

				/* Neutral Model
						 //the stabilising selection function
						 fitnessfunction = exp(-((BConc-BOpt)/S)^2);

						 //fitnessScaling callback to avoid SLiM bug
					 if (fitnessfunction == 0) {
							 ind.fitnessScaling = fitnessfunction + 0.1;
							 print("WHOOPSIE");
							 ind.tag = 0;
							 }
						 else
							 ind.fitnessScaling = fitnessfunction;
							 */

}


				//export section #2: writing one file per generation
		gen = sim.generation;
		writeFile(asString(paste0(c("SLiM-output.csv"))), lines);
	}



//HISTORY PLOT CODE + OUTPUT CODE
/*
//enable plots
1 early() {
	//[B Conc]/t plot code
	sim.setValue("history1", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath1", writeTempFile("plot_BConc"+ seed +  "_", ".png", ""));

	//[A Conc]/t plot code
	sim.setValue("history2", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath2", writeTempFile("plot_Aconc"+ seed + "_", ".png", ""));

	//[A Conc]/[B Conc] plot code
	sim.setValue("history3", matrix(c(0.0, 0.0), nrow=1));
	defineConstant("pngPath3", writeTempFile("plot_ABConc_"+ seed + "_",  ".png", ""));


	if (exists("slimgui")) {
		slimgui.openDocument(pngPath1);
		slimgui.openDocument(pngPath2);
		slimgui.openDocument(pngPath3);
		}
}
*/


//update plots
1:2000 late() {
	// choose when to update plots below
	if (sim.generation % 5 != 0) return;

	//debug-puposes only: sim.outputFull();
	//Report mean phenotypes
	inds = sim.subpopulations.individuals;
	meanNetwork = mean(inds.getValue("Bconcentration"));
	meanACONC = mean(inds.getValue("ATotals"));
	meandivision = meanACONC/meanNetwork;
	//Actual Output Code
	catn();
	catn();
	catn("Generation: " + sim.generation);
	catn("Mean A Totals: " + meanACONC);
	catn("Mean B CONC: " + meanNetwork);
	catn("Mean correlation " + meandivision);
	catn();
	catn();

/*
	//[B Conc]/t plot code
	history1 = sim.getValue("history1");
	history1 = rbind(history1, c(sim.generation, meanNetwork));
	sim.setValue("history1", history1);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history1[,0], sep=", ") + ')',
		'y <- c(' + paste(history1[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath1 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="B CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath1 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath1);
	deleteFile(scriptPath1);

	//[A Conc]/t plot code
	history2 = sim.getValue("history2");
	history2 = rbind(history2, c(sim.generation, meanACONC));
	sim.setValue("history2", history2);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history2[,0], sep=", ") + ')',
		'y <- c(' + paste(history2[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath2 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="A CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath2 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath2);
	deleteFile(scriptPath2);

	//[A Conc]/[B Conc] plot code
	history3 = sim.getValue("history3");
	history3 = rbind(history3, c(sim.generation, meandivision));
	sim.setValue("history3", history3);
	//aes data for history plot -> sends data to R
	rstr = paste(c('{',
		'x <- c(' + paste(history3[,0], sep=", ") + ')',
		'y <- c(' + paste(history3[,1], sep=", ") + ')',
		'png(width=15, height=15, units="in", res=72, file="' + pngPath3 + '")', 'par(mar=c(4.0, 4.0, 1.5, 1.5))', 'plot(x=x, y=y, xlim=c(0, 2000), ylim=c(-250,250), type="l",', 'xlab="Generation", ylab="A CONC / B CONC", cex.axis=0.95,', 'cex.lab=1.2, mgp=c(2.5, 0.7, 0), col="red", lwd=2,', 'xaxp=c(0, 20000, 1000))',
		'box()',
		'dev.off()',
		'}'), sep="\n");
	scriptPath3 = writeTempFile("plot_", ".R", rstr);
	system("/usr/lib/R/bin/Rscript", args=scriptPath3);
	deleteFile(scriptPath3);
}
*/


2000 late() {
sim.outputFull("SLiMulation_Output_Full_" + seed +".txt");
sim.outputFixedMutations("SLiMulation_Output_FixedMutations_" + seed +".txt");
}
